function []=Generate_rect_unstr_CGRID(CGRID_path,base_name,min_ang,max_area,xpc1,ypc1,xlenc,ylenc)
%
% Generate_rect_unstr_CGRID() generates an unstructured rectangular grid
% defined by two file (.node and .ele). This is a fast alternative of the
% detailed unstructured grid generated by the BatTri toolbox.
% Mesh element size is controllable.
% Inputs:
%   -base_name   : base name of the .node and .ele files to be generated
%   -min_ang     : minimum triangle angle constraint  (degree)
%   -max_area    : maximum triangle side length constraint (m)
%   -xpc1,ypc1   : origin's coordinates of the grid's
%   -xlenc,ylenc : lengths of the sides of the rectangle (grid)
%  Output:
%   -base_name.poly file defining the grid boundaries
%   -base_name.node and base_name.ele files defining the computational grid
%   
%
%   (x4,y4)-------------(x3,y3)   
%      |                   |
%      |                   |
%      |                   |
%   (x1,y1)-------------(x2,y2)
%__________________________________________________________________________
%
% Author : Ahmad Kourani, PhD student, American University of Beirut
% Date   : Feb 2016
% Updated: Jan 2017
%__________________________________________________________________________


x1=xpc1;
y1=ypc1;
x2=xpc1+xlenc;
y2=y1;
x3=x2;
y3=ypc1+ylenc;
x4=x1;
y4=y3;

CGRIDID = fopen([CGRID_path,base_name '.poly'],'w');

fprintf(CGRIDID,'# 4 vertices of a rectangle of 5m by 1m\n');
fprintf(CGRIDID,'4 2 0 0 # no attributes and markers here\n');
fprintf(CGRIDID,['1 ' num2str(x1) '. ' num2str(y1) '.\n']);
fprintf(CGRIDID,['2 ' num2str(x2) '. ' num2str(y2) '.\n']);
fprintf(CGRIDID,['3 ' num2str(x3) '. ' num2str(y3) '.\n']);
fprintf(CGRIDID,['4 ' num2str(x4) '. ' num2str(y4) '.\n']);
fprintf(CGRIDID,'# 4 segments of rectangle with boundary markers \n');
fprintf(CGRIDID,'4 1\n');
fprintf(CGRIDID,'1 1 2 1 # south,marker:1\n');
fprintf(CGRIDID,'2 2 3 2 # east,marker:2\n');
fprintf(CGRIDID,'3 3 4 3 # north,marker:3\n');
fprintf(CGRIDID,'4 4 1 4 # west,marker:4\n');
fprintf(CGRIDID,'# no holes \n');
fprintf(CGRIDID,'0 \n');

fclose(CGRIDID);

disp('Make sure to have triange.exe and to add its location to system path')

current_folder=pwd;
cd(fullfile(CGRID_path))

% -p	:	reads a .poly file
% -q30	:	imposes a minimum angle of 30 degrees
% -a200000000	:	imposes a maximum triangle area of 200,000,000 m2
% -I	:	supresses mesh iteration numbers
% eval(sprintf(['!triangle -pq30a200000000I ',base_name,'&']))
eval(sprintf(['!triangle -pq' min_ang 'a' max_area 'I ',base_name,'&'])) 

cd(fullfile(current_folder))
    
disp('Creating the files of the mesh needs some time.. (pausing for 2 sec)')
pause(2)
plotgrid([CGRID_path,base_name])

end